{"version":3,"sources":["services/movies-api.js","pages/HomePage/HomePage.js","pages/Cast/Cast.js","pages/Reviews/Reviews.js","routes.js","pages/MovieDetailsPage/MovieDetailsPage.js","components/SearchBar/SearchBar.js","pages/MoviesPage/MoviesPage.js","pages/NotFoundPage/NotFoundPage.js","components/Navigation/Navigation.js","components/App.js","index.js"],"names":["URL","KEY","getTrending","axios","get","searchMovies","query","getMovieDetails","id","getMovieCredits","getMovieReviews","HomePage","state","trending","API","then","res","setState","data","results","this","map","el","key","to","title","name","Component","Cast","cast","movieId","props","match","params","alt","src","profile_path","character","Reviews","reviews","length","author","content","MovieDetailsPage","movie","genres","handleGoback","history","goBack","reduce","acc","type","onClick","original_title","poster_path","release_date","slice","vote_average","overview","url","path","routes","component","SearchBar","value","handleChange","e","target","handleSubmit","preventDefault","onSubmit","onChange","MoviesPage","movies","onSearchSubmit","location","push","search","currentSearch","URLSearchParams","prevProps","prevSearch","NotFoundPage","ativeLink","color","Navigation","exact","activeStyle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.431643e1.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\nconst KEY = 'bf011c312de769b1a5ea31ca61416e61';\n\n// список самых популярных фильмов на сегодня для создания коллекции на главной странице:\nexport const getTrending = () =>\n  axios.get(`${URL}/trending/movie/day?api_key=${KEY}`);\n\n// поиск кинофильма по ключевому слову на странице фильмов:\nexport const searchMovies = (query = '') =>\n  axios.get(\n    `${URL}/search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`,\n  );\n\n// запрос полной информации о фильме для страницы кинофильма:\nexport const getMovieDetails = id =>\n  axios.get(`${URL}/movie/${id}?api_key=${KEY}&language=en-US`);\n\n// запрос информации о актреском составе для страницы кинофильма:\nexport const getMovieCredits = id =>\n  axios.get(`${URL}/movie/${id}/credits?api_key=${KEY}`);\n\n// запрос обзоров для страницы кинофильма:\nexport const getMovieReviews = id =>\n  axios.get(`${URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as API from '../../services/movies-api';\n\nclass HomePage extends Component {\n  state = {\n    trending: [],\n  };\n\n  componentDidMount() {\n    this.getTrending();\n  }\n\n  getTrending = () => {\n    API.getTrending().then(res => {\n      // console.log('res', res);\n      this.setState({ trending: res.data.results });\n    });\n  };\n\n  render() {\n    const { trending } = this.state;\n\n    return (\n      <div>\n        <ul>\n          <p>Trending today</p>\n          {trending.map(el => (\n            <li key={el.id}>\n              <Link to={`/movies/${el.id}`}>{el.title || el.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as API from '../../services/movies-api';\n\nclass Cast extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({}.isRequired),\n    }).isRequired,\n  };\n\n  state = {\n    cast: [],\n  };\n\n  componentDidMount() {\n    this.getMovieCredits();\n  }\n\n  getMovieCredits = () => {\n    const { match } = this.props;\n    const { movieId } = match.params;\n\n    API.getMovieCredits(movieId).then(res => {\n      // console.log('res', res);\n      this.setState({ cast: res.data.cast });\n    });\n  };\n\n  render() {\n    const { cast } = this.state;\n    return (\n      <>\n        <ul>\n          {cast.map(el => (\n            <li key={el.id}>\n              <img\n                alt={el.name}\n                src={`https://image.tmdb.org/t/p/w500${el.profile_path}`}\n              />\n              <p>{el.name}</p>\n              <p>Character: {el.character}</p>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nexport default Cast;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as API from '../../services/movies-api';\n\nclass Reviews extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({}.isRequired),\n    }).isRequired,\n  };\n\n  state = {\n    reviews: [],\n  };\n\n  componentDidMount() {\n    this.getMovieReviews();\n  }\n\n  getMovieReviews = () => {\n    const { match } = this.props;\n    const { movieId } = match.params;\n\n    API.getMovieReviews(movieId).then(res => {\n      // console.log('res', res);\n      this.setState({ reviews: res.data.results });\n    });\n  };\n\n  render() {\n    const { reviews } = this.state;\n\n    return (\n      <>\n        {reviews.length === 0 && (\n          <p>We don&#39;t have any reviews for this movie.</p>\n        )}\n        {reviews.length !== 0 && (\n          <ul>\n            {reviews.map(el => (\n              <li key={el.id}>\n                <p>Author: {el.author}</p>\n                <p>{el.content}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n\nexport default Reviews;\n","export default {\n  HOME: '/',\n  MOVIES: '/movies',\n  MOVIE_DETAILS: '/movies/:movieId',\n  CAST: '/movies/:movieId/cast',\n  REVIEWS: '/movies/:movieId/reviews',\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport Cast from '../Cast/Cast';\nimport Reviews from '../Reviews/Reviews';\nimport * as API from '../../services/movies-api';\nimport routes from '../../routes';\n\nclass MovieDetailsPage extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({}.isRequired),\n      url: PropTypes.string.isRequired,\n    }).isRequired,\n    history: PropTypes.shape({ goBack: PropTypes.func.isRequired }).isRequired,\n  };\n\n  state = {\n    movie: {\n      genres: [],\n    },\n  };\n\n  componentDidMount() {\n    this.getMovieDetails();\n  }\n\n  getMovieDetails = () => {\n    const { match } = this.props;\n    const { movieId } = match.params;\n\n    API.getMovieDetails(movieId).then(res => {\n      // console.log('res', res);\n      this.setState({ movie: res.data });\n    });\n  };\n\n  handleGoback = () => {\n    const { history } = this.props;\n\n    // if (location.state) {\n    //   return history.push(history => ({\n    //     ...history,\n    //     pathname: location.state.from,\n    //   }));\n    // }\n\n    // history.push('/'); // проверить!!!\n    history.goBack();\n    // history.push(location.state.from); // проверить!!!\n  };\n\n  render() {\n    const { movie } = this.state;\n    const { match } = this.props;\n    const genres = movie.genres.reduce((acc, el) => `${acc} ${el.name}`, '');\n\n    // console.log(genres);\n\n    return (\n      <div>\n        <button type=\"button\" onClick={this.handleGoback}>\n          Go back\n        </button>\n        {movie.original_title && (\n          <div>\n            <img\n              alt={movie.original_title}\n              src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n            />\n            <h2>\n              {movie.original_title} ({movie.release_date.slice(0, 4)})\n            </h2>\n            <p>User Score: {movie.vote_average * 10}%</p>\n\n            <p>Overview {movie.overview}</p>\n            <p>Genres {genres}</p>\n            <p>Additional information</p>\n            <ul>\n              <li>\n                <NavLink to={`${match.url}/cast`}>Cast</NavLink>\n              </li>\n              <li>\n                <NavLink to={`${match.url}/reviews`}>Reviews</NavLink>\n              </li>\n            </ul>\n          </div>\n        )}\n        <Switch>\n          <Route path={routes.CAST} component={Cast} />\n          <Route path={routes.REVIEWS} component={Reviews} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default MovieDetailsPage;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    value: '',\n  };\n\n  handleChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { onSubmit } = this.props;\n    const { value } = this.state;\n    onSubmit(value);\n    this.setState({ value: '' });\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input value={value} onChange={this.handleChange} type=\"text\" />\n        <button type=\"submit\">Search</button>\n      </form>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport * as API from '../../services/movies-api';\n\nclass MoviesPage extends Component {\n  static propTypes = {\n    history: PropTypes.shape({ push: PropTypes.func.isRequired }).isRequired,\n    location: PropTypes.shape({ search: PropTypes.string.isRequired })\n      .isRequired,\n  };\n\n  state = {\n    movies: [],\n  };\n\n  componentDidMount() {\n    const { location } = this.props;\n    const currentSearch = new URLSearchParams(location.search).get('query');\n    // if(location)\n\n    if (!currentSearch) {\n      return;\n    }\n\n    this.searchMovies(currentSearch);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevSearch = new URLSearchParams(prevProps.location.search).get(\n      'query',\n    );\n    const { location } = this.props;\n    const currentSearch = new URLSearchParams(location.search).get('query');\n\n    if (prevSearch === currentSearch) {\n      return;\n    }\n\n    this.searchMovies(currentSearch);\n  }\n\n  searchMovies = query => {\n    API.searchMovies(query).then(res =>\n      this.setState({ movies: res.data.results }),\n    );\n  };\n\n  onSearchSubmit = query => {\n    const { history, location } = this.props;\n    history.push({\n      ...location,\n      search: `?query=${query}`,\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div>\n        <SearchBar onSubmit={this.onSearchSubmit} />\n        <ul>\n          {movies.map(el => (\n            <li key={el.id}>\n              <Link to={`/movies/${el.id}`}>{el.title}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default MoviesPage;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport routes from '../../routes';\n\nconst NotFoundPage = () => {\n  return (\n    <div>\n      <h2>Sorry, the page you requested was not found.</h2>\n      <p>\n        This is our homepage: <NavLink to={routes.HOME}>Click me!</NavLink>\n      </p>\n    </div>\n  );\n};\n\nexport default NotFoundPage;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport routes from '../../routes';\n\nconst ativeLink = {\n  color: 'palevioletred',\n};\n\nconst Navigation = () => {\n  return (\n    <ul>\n      <li>\n        <NavLink to={routes.HOME} exact activeStyle={ativeLink}>\n          Home\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to={routes.MOVIES} activeStyle={ativeLink}>\n          Movies\n        </NavLink>\n      </li>\n    </ul>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport HomePage from '../pages/HomePage/HomePage';\nimport MovieDetailsPage from '../pages/MovieDetailsPage/MovieDetailsPage';\nimport MoviesPage from '../pages/MoviesPage/MoviesPage';\nimport NotFoundPage from '../pages/NotFoundPage/NotFoundPage';\nimport Navigation from './Navigation/Navigation';\nimport routes from '../routes';\n\nconst App = () => {\n  return (\n    <>\n      <Navigation />\n\n      <Switch>\n        <Route path={routes.HOME} exact component={HomePage} />\n        <Route path={routes.MOVIE_DETAILS} component={MovieDetailsPage} />\n        <Route path={routes.MOVIES} component={MoviesPage} />\n        <Route path=\"*\" component={NotFoundPage} />\n      </Switch>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}